----learn python----
#!/usr/bin/env python3        """告诉Linux/OS/X系统这是可执行的python程序"""
# -*- coding: utf-8 -*-          """让解释器按UTF-8编码读取"""
---------------------分 割 线-------------------------------------------------

字符串： ord()获取字符的整数表示,chr()把编码转换为对应字符,len()获取长度，encode（）获取对应字符编码，decode（）将编码转为对应字符
list和tuple：list——[ ]      #类似数组，可变，append()在结尾附加元素
								#pop()删除最后元素，pop(i)删除指定位置元素
             tuple——( )     #不可变，要初始化，其它类似list
							#单元素时要写成例如：t=(1,)
dict和set:
dict——{ }   #key-value存储，key为常量，一个key对应一个value
                   #get(key)返回value，pop(key)删除
set——([ ])  #类似dict，但没有value只有key，需要一个list作为输入
                   #重复元素会过滤，add(key)添加元素，remove（key）删除元素
                   #可看作集合，并、交集：s1&s2、s1 | s2……
切片：list[0:3]、list[:3]、list[-2:]、list[0:10:2]、list[::2]等
	  （tuple、字符串也适用）
生成器(generator):  ①L=(iterable)   ②关键字yield  生成器可迭代，next()获得下一个结果
迭代器(iterator)：  iter() 生成可迭代序列

函数参数:  func(*args,**kwargs) *args为可变参数  **kwargs为关键字参数
高阶函数：
    map():将传入的函数依次作用到序列的每个元素并返回新的iterator。
	  #map(f,序列)
    reduce():把一个函数作用到序列上，把结果继续和序列的下一个元素做累积计算。            
	  #reduce(f,序列)
    filter():接收一个函数和一个序列，函数依次作用到每个元素并根据返回值是True还是False决定保留还是丢弃该元素。
	  #filter(f,序列)
    sorted():排序    
	  #sorted(序列,key,reverse)。
返回函数：
	不立即执行，局部变量有“闭包属性”。
匿名函数:
	lambda argument_list:expression (lambda 参数列表:表达式)
装饰器：略
偏函数：用functools模块，functools.parttial()
	如：>>> int2 = functools.partial(int, base=2)
	
模块：所有.py都是一个模块，为避免模块名重复，使用目录组织模块的方法叫包(package)
	mycompany
	├─ __init__.py		mycompany包及里面的模块
	├─ abc.py			(每个包目录下要有一个__init__.py文件，否则不能识别为包)
	└─ xyz.py
	用import引入模块
	
__name__：当在运行一个.py文件时Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方把此.py文件当模块导入时则不会。
作用域：类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途
		类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用
		
面向对象编程：
	通过class定义类
	class Student(object):
		pass
	类和实例：方法 __init__(self,*args) 方法的第一个参数为self
	访问限制：__name 私有变量(private)  #其实是python解释器将变量名改成了_class__name
			  __name__ 特殊变量(不是private的)
			  _name (约定俗成的：虽然不是私有变量，但请把我当成私有变量)
	继承和多态：子类继承父类所有功能，可以新增方法或者重写父类的方法
	静态语言：如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类。
	动态语言：如果需要传入Animal类型，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个对应的方法就可以了
	判断类型：type()、isinstance()   (isinstance()比较好)
	获得对象属性或方法：如果要获得一个对象的所有属性和方法，可以使用dir()函数，它返回一个包含字符串的list。
		比如，获得一个str对象的所有属性和方法：
		>>> dir('ABC')
		['__add__', '__class__',..., '__subclasshook__', 'capitalize', 'casefold',..., 'zfill']
	
		类似__xxx__的属性和方法在Python中都是有特殊用途的，比如__len__方法返回长度。在Python中，如果你调用len()函数试图获取一个对象的长度，实际上，在len()函数内部，它自动去调用该对象的__len__()方法，所以，下面的代码是等价的：
		>>> len('ABC')
		3
		>>> 'ABC'.__len__()
		3
		仅仅把属性和方法列出来是不够的，配合getattr()获得属性值、setattr()设置属性值以及hasattr()判断是否存在属性
	
	__slots__:限制可以绑定的属性
	@property:把一个getter方法变成属性，只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@XXX.setter，负责把一个setter方法变成属性赋值
	多重继承及MisIn:
		class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):
			pass
	定制类：__str__、__repr__、__iter__、__next__、__getitem__、__getattr__、__call__
	枚举类：Python提供了Enum类来实现这个功能
			from enum import Enum
			Month = Enum('Month', ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
			
			for name, member in Month.__members__.items():
				print(name, '=>', member, ',', member.value)
			输出：
			Jan=>Month.Jan,1
			Feb=>Month.Feb,2
			……
			value属性则是自动赋给成员的int常量，默认从1开始计数
			枚举类：
				class Weekday(Enum):
					pass
	元类：
		使用type()创建class：Hello = type('Hello', (object,), dict(hello=func)) # 创建Hello class，函数func要提前定义
		type()函数依次传入3个参数：
		1.class的名称；
		2.继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；
		3.class的方法名称与函数绑定，这里我们把函数fn绑定到方法名hello上。

错误处理：try...except...finally...
			try:
				print('try...')
				r = 10 / 0
				print('result:', r)
			except ZeroDivisionError as e:
				print('except:', e)
			finally:
				print('finally...')
	记录错误：logging
			import logging
			...
			except Exception as e:
				logging.exception(e)
			如此这般会打印出错误信息
	抛出错误：raise Error
	捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。
	调试：
		断言(assert)：assert n != 0, 'n is zero!' 表示n!=0应该为True才对
		logging:把print()替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件
				在import logging之后添加一行配置再试试：
					import logging
					logging.basicConfig(level=logging.INFO)
					就可以输出信息。
				logging的好处，它允许你指定记录信息的级别，有debug，info，warning，error等几个级别
		pdb(设置断点调试)：...略
		pdb.set_trace()：这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点
		
IO编程:
	文件读写:用内置的open()函数打开文件，f = open('/Users/michael/test.txt', 'r'),读取二进制文件用'rb'格式；
			 如果文件打开成功，调用read()方法可以一次读取文件的全部内容，f.read()；
			 写文件用write(),f.write();
			 记得用close()方法关闭文件，f.close();
			 此外还有read(size)、readlines()...
	StringIO和BytesIO: ...
	操作文件和目录:在OS模块中有很多这类函数.....
	序列化：把变量从内存中变成可存储或传输的过程称之为序列化(在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening...)
			要导入pickle模块；
			>>> d = dict(name='Bob', age=20, score=88)
			>>>pickle.dumps(d) 	#pickle.dumps()方法把任意对象序列化成一个bytes，然后，就可以把这个bytes写入文件。
			
			>>> f = open('dump.txt', 'wb')
			>>> pickle.dump(d, f)  #或者用另一个方法pickle.dump()直接把对象序列化后写入一个file-like Object
			
			用pickle.loads()方法反序列化出对象
			>>> f = open('dump.txt', 'rb')
			>>> d = pickle.load(f)
			>>> d      #也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象
进程和线程：
	多进程：Python的os模块封装了常见的系统调用。    
			fork()创建子进程并返回两次(返回给父进程和子进程),子进程永远返回0，而父进程返回子进程的ID;
			getpid()返回当前进程ID，getppid()返回当前进程的父进程ID;
			multiprocessing：由于Windows没有fork()调用，python提供了multiprocessing模块作为跨平台的多进程支持，multiprocessing模块提供了一个Process类来代表一个进程对象
			'''
			from multiprocessing import Process
			import os
			# 子进程要执行的代码
			def run_proc(name):
				print('Run child process %s (%s)...' % (name, os.getpid()))

			if __name__=='__main__':
				print('Parent process %s.' % os.getpid())
				p = Process(target=run_proc, args=('test',))
				print('Child process will start.')
				p.start()
				p.join()
				print('Child process end.')
			'''
			创建子进程时，只需要传入一个执行函数和函数的参数，创建一个Process实例，用start()方法启动,join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。
			创建多个子进程：Pool...
			subprocess模块：...
			进程间的通信：multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。
	多线程：两个模块，_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。
			启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：
				import threading
				def loop():
					pass
				t = threading.Thread(target=loop, name='LoopThread')
			current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定。
			Lock：创建一个锁就是通过threading.Lock()来实现。
				lock = threading.Lock()
				def run_thread(n):
					for i in range(100000):
						lock.acquire()
						try:
							function(n)
						finally:           
							lock.release()